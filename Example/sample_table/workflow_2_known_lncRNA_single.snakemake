


SAMPLES_1 = ["S517N701", "S517N702", "S517N703", "S517N704", "S517N705", "S517N706", "S502N701", "S503N704", "S503N705"]

SAMPLES_2 = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3", "R_Lung_1", "R_Lung_2", "R_Lung_3", "R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

SAMPLE_join = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join = "Kidney;Kidney;Kidney;Lung;Lung;Lung;Spleen;Spleen;Spleen;"




CLASS_Lung = ["R_Lung_1", "R_Lung_2", "R_Lung_3"]

CLASS_Lung_2 = "R_Lung_1;R_Lung_2;R_Lung_3"

CLASS_Kidney = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3"]

CLASS_Kidney_2 = "R_Kidney_1;R_Kidney_2;R_Kidney_3"

CLASS_Spleen = ["R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

CLASS_Spleen_2 = "R_Spleen_1;R_Spleen_2;R_Spleen_3"

CLASS_Kidney_vs_Lung = CLASS_Kidney + CLASS_Lung

SAMPLE_join_Kidney_vs_Lung = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;"

SAMPLE_group_join_Kidney_vs_Lung = "Kidney;Kidney;Kidney;Lung;Lung;Lung;"

CLASS_Kidney_vs_Spleen = CLASS_Kidney + CLASS_Spleen

SAMPLE_join_Kidney_vs_Spleen = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Kidney_vs_Spleen = "Kidney;Kidney;Kidney;Spleen;Spleen;Spleen;"

CLASS_Lung_vs_Spleen = CLASS_Lung + CLASS_Spleen

SAMPLE_join_Lung_vs_Spleen = "R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Lung_vs_Spleen = "Lung;Lung;Lung;Spleen;Spleen;Spleen;"

PAIRS = ["Kidney_vs_Lung", "Kidney_vs_Spleen", "Lung_vs_Spleen"]




PROJECT_NAME = "R_hppRNA_data"

WORKFLOW_NAME = "Subread_featureCounts_DESeq2"

WORKING_FOLDER = "/data/hppRNA_data"

HPPRNA_SOFTWARE_FOLDER = "/data/hppRNA_software"

ADAPTER_SEQUENCE = "AGATCGGAAGAGC"

ASSEMBLY_VERSION = "mm10"

GATK_FOLDER = "/data/hppRNA_software/GATK"



GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/mRNA_lncRNA.gtf"

MAP_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/mRNA_lncRNA.transcript_to_gene.txt"






FASTQC_OUTPUT_FOLDER = WORKING_FOLDER + "/standard_results/FastQC"

CONTAMINANT_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/contaminant_list.txt"

ADAPTER_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/adapter_list.txt"

PRINSEQ_LITE_FILE = HPPRNA_SOFTWARE_FOLDER + "/prinseq-lite-0.20.4/prinseq-lite.pl"

WIGTOBIGWIG = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/wigToBigWig"

CHROM_SIZES = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/" + ASSEMBLY_VERSION + ".chrom.sizes"

GENOME_FA_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genome.fa"

REPEAT_GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/repeats.gtf"

TOPHAT_CUFFLINK_CUFFDIFF_INDEX_FILE = WORKING_FOLDER + "/standard_results/" + WORKFLOW_NAME + "/Index/" + ASSEMBLY_VERSION

TOPHAT_LNCRNA_INDEX_FILE = WORKING_FOLDER + "/standard_results/lncRNA_denovo/lncRNA_detection/Index/" + ASSEMBLY_VERSION

EXTRACT_UNIQUE = HPPRNA_SOFTWARE_FOLDER + "/BlackOPs_v1.06/perl/extract_unique.pl"

FUSIONCATCHER_DATA_FOLDER = HPPRNA_SOFTWARE_FOLDER + "/FusionCatcher/fusioncatcher/data/mus_musculus/"

THREADS = 15

TOPHAT_MATE_INNER_DIST = 50

TOPHAT_MATE_STD_DEV = 20

TOPHAT_CUFFLINKS_CUFFDIFF_LIBRARY_TYPE = "fr-unstranded"

SUBREAD_MINFRAGLENGTH = 50

SUBREAD_MAXFRAGLENGTH = 600

SUBREAD_PE_ORIENTATION = "fr"

FEATURECOUNTS_STRANDSPECIFIC = "0"

BOWTIE_HISAT_MININS = 0

BOWTIE_HISAT_MAXINS = 800

BOWTIE_HISAT_PE_ORIENTATION = "--fr"

KALLISTO_L = 200

KALLISTO_S = 20

RSEM_FRAGMENT_LENGTH_MIN = 1

RSEM_FRAGMENT_LENGTH_MAX = 1000

RSEM_FRAGMENT_LENGTH_MEAN = -1

RSEM_FRAGMENT_LENGTH_SD = 0

RSEM_FORWARD_PROB = 0.5

BOWTIE_HISAT_NOFW_NORC = " "

EXPRESS_ORIENTATION = " "

DCC_STRAND = "-N"





rule all:
    input:
        expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Processed_FASTQ/{sample}.adapt.qc.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Fasta/{sample}.adapt.qc.collapser.fasta", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.sorted.unique.bam.bai", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/{project}.{workflow}.gene.counts.csv", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/{project}.{workflow}.gene.counts.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/{project}.{workflow}.gene.RPKM.csv", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/{project}.{workflow}.gene.RPKM.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/DEG/{project}.{workflow}.{pair}.DESeq2.csv", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/{workflow}/DEG/{project}.{workflow}.{pair}.DESeq2.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/{workflow}/NGS_plot/NGSplot.{sample}.genebody.avgprof.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/NGS_plot/NGSplot.{sample}.genebody.heatmap.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/NGS_plot/NGSplot.{sample}.genebody.zip", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Bigwig/{sample}.bw", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.heatmap.R", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.txt.1.heatmap.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.PCA.R", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.txt.1.matrix.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.txt.1.PCA.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.RPKM.clean.txt.1.rotation.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME)

rule rename_fastq:
        input:
                expand("{work_folder}/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_1)
        output:
                expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2)
        run:
                shell("mkdir -p {WORKING_FOLDER}/standard_results")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Raw_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Processed_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fasta")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/FastQC")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/SNP")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fusion_gene")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index")
                for i in range(len(SAMPLES_1)):
                    single_in = "".join(["{WORKING_FOLDER}/", SAMPLES_1[i], ".fastq"])
                    single_out = "".join(["{WORKING_FOLDER}/standard_results/Raw_FASTQ/", SAMPLES_2[i], ".fastq"])
                    cmd_single = " ".join(["cp", single_in, single_out])
                    shell(cmd_single)



rule fastqc_fisrt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule cutadapt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    shell: """
           cutadapt -a {ADAPTER_SEQUENCE} -m 20 -o {output} {input}
           """



rule fastq_quality_filter:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    shell: """
           fastq_quality_filter -q 20 -p 50 -Q 33 -i {input} -o {output}
           """



rule fastqc_second:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule fastx_collapser:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Fasta/{smp}.adapt.qc.collapser.fasta"
    shell: """
           fastx_collapser -Q 33 -v -i {input} -o {output}
           """




rule build_index:
    input:
         expand("{software}/hppRNA_genome/{assembly}/genome.fa", software = HPPRNA_SOFTWARE_FOLDER, assembly = ASSEMBLY_VERSION),
         expand("{software}/my_R/{workflow}.buildindex.R", software = HPPRNA_SOFTWARE_FOLDER, workflow = WORKFLOW_NAME)
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.00.b.array",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.00.b.tab",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.reads"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index
           R --slave --vanilla --args "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}" "{HPPRNA_SOFTWARE_FOLDER}/hppRNA_genome/{ASSEMBLY_VERSION}/genome.fa" < {HPPRNA_SOFTWARE_FOLDER}/my_R/{WORKFLOW_NAME}.buildindex.R
           """




rule align:
    input:
        expand("{work_folder}/standard_results/{workflow}/Index/{assembly}.00.b.array", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, assembly = ASSEMBLY_VERSION),
        expand("{work_folder}/standard_results/{workflow}/Index/{assembly}.00.b.tab", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, assembly = ASSEMBLY_VERSION),
        expand("{work_folder}/standard_results/{workflow}/Index/{assembly}.reads", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, assembly = ASSEMBLY_VERSION),
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.unique.bam"
    shell: """
           R --slave --vanilla --args Single-End {wildcards.smp} {WORKING_FOLDER}/standard_results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION} < {HPPRNA_SOFTWARE_FOLDER}/my_R/{WORKFLOW_NAME}.align.R
           """




rule sort_bam:
    input:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.unique.bam"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.sorted.unique.bam"
    shell: """
           samtools sort -o {output} {input}
           """



rule index_bam:
    input:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.sorted.unique.bam"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.sorted.unique.bam.bai"
    shell: """
           samtools index {input}
           """




rule feature_counts:
    input:
          GTF,
          expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2)
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.counts.csv",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.counts.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.csv",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.txt"
    threads: THREADS
    shell: """
           R --slave --vanilla --args Single-End {WORKING_FOLDER}/standard_results {GTF} "{SAMPLE_join}" {PROJECT_NAME} {threads} {FEATURECOUNTS_STRANDSPECIFIC} < {HPPRNA_SOFTWARE_FOLDER}/my_R/{WORKFLOW_NAME}.featureCounts.R
           """






rule deseq2_Kidney_vs_Lung:
    input:
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = CLASS_Kidney_vs_Lung),
        GTF
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.col.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.DESeq2.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.DESeq2.txt",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.gene.counts.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.gene.counts.txt",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.gene.RPKM.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.gene.RPKM.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DESeq2_configure.pl -c1 Kidney -c2 Lung -b1 "{CLASS_Kidney_2}" -b2 "{CLASS_Lung_2}" -o {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.col.csv
           R --slave --vanilla --args Single-End Kidney Lung "{CLASS_Kidney_2}" "{CLASS_Lung_2}" {GTF} {WORKING_FOLDER}/standard_results {PROJECT_NAME} < {HPPRNA_SOFTWARE_FOLDER}/my_R/{WORKFLOW_NAME}.DESeq2.R
           """





rule deseq2_Kidney_vs_Spleen:
    input:
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = CLASS_Kidney_vs_Spleen),
        GTF
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.col.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.DESeq2.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.DESeq2.txt",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.gene.counts.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.gene.counts.txt",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.gene.RPKM.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.gene.RPKM.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DESeq2_configure.pl -c1 Kidney -c2 Spleen -b1 "{CLASS_Kidney_2}" -b2 "{CLASS_Spleen_2}" -o {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.col.csv
           R --slave --vanilla --args Single-End Kidney Spleen "{CLASS_Kidney_2}" "{CLASS_Spleen_2}" {GTF} {WORKING_FOLDER}/standard_results {PROJECT_NAME} < {HPPRNA_SOFTWARE_FOLDER}/my_R/{WORKFLOW_NAME}.DESeq2.R
           """





rule deseq2_Lung_vs_Spleen:
    input:
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = CLASS_Lung_vs_Spleen),
        GTF
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.col.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.DESeq2.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.DESeq2.txt",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.gene.counts.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.gene.counts.txt",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.gene.RPKM.csv",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.gene.RPKM.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DESeq2_configure.pl -c1 Lung -c2 Spleen -b1 "{CLASS_Lung_2}" -b2 "{CLASS_Spleen_2}" -o {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.col.csv
           R --slave --vanilla --args Single-End Lung Spleen "{CLASS_Lung_2}" "{CLASS_Spleen_2}" {GTF} {WORKING_FOLDER}/standard_results {PROJECT_NAME} < {HPPRNA_SOFTWARE_FOLDER}/my_R/{WORKFLOW_NAME}.DESeq2.R
           """



rule ngs_plot:
    input:
        bam="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.sorted.unique.bam",
        bai="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.sorted.unique.bam.bai"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{smp}.genebody.avgprof.pdf",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{smp}.genebody.heatmap.pdf",
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{smp}.genebody.zip"
    shell: """
           ngs.plot.r -G {ASSEMBLY_VERSION} -R genebody -C {input.bam} -O {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{wildcards.smp}.genebody -T {wildcards.smp} -L 3000 -RB 0.05 -F rnaseq
           """



rule bam2wig:
    input:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.sorted.unique.bam"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.gz"
    shell: """
           samtools mpileup -BQ0 {input} | perl -ne 'BEGIN{{print "track type=wiggle_0 name={wildcards.smp} maxHeightPixels=64:64:11 color=31,120,180 visibility=full\n"}};($c, $start, undef, $depth) = split; if ($c ne $lastC) {{ print "variableStep chrom=$c\n"; }};$lastC=$c;next unless $. % 5 ==0;print "$start\t$depth\n" unless $depth<3;' | gzip -c > {output}
           """



rule wig2wig2:
    input:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.gz"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.2.gz"
    shell: """
           zcat {input} | sed '1d' | gzip -c > {output}
           """



rule wig22bw:
    input:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.2.gz"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.bw"
    shell: """
           {WIGTOBIGWIG} {input} {CHROM_SIZES} {output}
           """



rule prepare_rpkm:
    input:
         perl=expand("{software}/my_perl/clean_RPKM_{workflow}.pl", software = HPPRNA_SOFTWARE_FOLDER, workflow = WORKFLOW_NAME),
         txt="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.txt"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt"
    shell: """
           perl {input.perl} -i {input.txt} -o {output}
           """



rule heatmap:
    input:
         expand("{software}/my_perl/generate_heatmap_Rscript.pl", software = HPPRNA_SOFTWARE_FOLDER),
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt"
    output:
         R="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.heatmap.R",
         pdf="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt.1.heatmap.pdf"
    shell: """
         perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_heatmap_Rscript.pl -i {PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt -d {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster -o {output.R}
         R --slave --vanilla < {output.R}
           """



rule pca:
    input:
         txt="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt",
         perl=expand("{software}/my_perl/generate_PCA_Rscript.pl", software = HPPRNA_SOFTWARE_FOLDER)
    output:
         R="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.PCA.R",
         matrix="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt.1.matrix.txt",
         pdf="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt.1.PCA.pdf",
         rotation="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt.1.rotation.txt"
    shell: """
           perl {input.perl} -i {PROJECT_NAME}.{WORKFLOW_NAME}.gene.RPKM.clean.txt -d {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster -o {output.R}
           R --slave --vanilla < {output.R}
           """



