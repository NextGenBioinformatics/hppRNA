


SAMPLES_1 = ["S517N701", "S517N702", "S517N703", "S517N704", "S517N705", "S517N706", "S502N701", "S503N704", "S503N705"]

SAMPLES_2 = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3", "R_Lung_1", "R_Lung_2", "R_Lung_3", "R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

SAMPLE_join = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join = "Kidney;Kidney;Kidney;Lung;Lung;Lung;Spleen;Spleen;Spleen;"




CLASS_Lung = ["R_Lung_1", "R_Lung_2", "R_Lung_3"]

CLASS_Lung_2 = "R_Lung_1;R_Lung_2;R_Lung_3"

CLASS_Kidney = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3"]

CLASS_Kidney_2 = "R_Kidney_1;R_Kidney_2;R_Kidney_3"

CLASS_Spleen = ["R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

CLASS_Spleen_2 = "R_Spleen_1;R_Spleen_2;R_Spleen_3"

CLASS_Kidney_vs_Lung = CLASS_Kidney + CLASS_Lung

SAMPLE_join_Kidney_vs_Lung = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;"

SAMPLE_group_join_Kidney_vs_Lung = "Kidney;Kidney;Kidney;Lung;Lung;Lung;"

CLASS_Kidney_vs_Spleen = CLASS_Kidney + CLASS_Spleen

SAMPLE_join_Kidney_vs_Spleen = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Kidney_vs_Spleen = "Kidney;Kidney;Kidney;Spleen;Spleen;Spleen;"

CLASS_Lung_vs_Spleen = CLASS_Lung + CLASS_Spleen

SAMPLE_join_Lung_vs_Spleen = "R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Lung_vs_Spleen = "Lung;Lung;Lung;Spleen;Spleen;Spleen;"

PAIRS = ["Kidney_vs_Lung", "Kidney_vs_Spleen", "Lung_vs_Spleen"]




PROJECT_NAME = "R_hppRNA_data"

WORKFLOW_NAME = "STAR_RSEM_EBSeq"

WORKING_FOLDER = "/data/hppRNA_data"

HPPRNA_SOFTWARE_FOLDER = "/data/hppRNA_software"

ADAPTER_SEQUENCE = "AGATCGGAAGAGC"

ASSEMBLY_VERSION = "mm10"

GATK_FOLDER = "/data/hppRNA_software/GATK"



GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genes.selected.pc.gtf"

MAP_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/transcript_to_gene.txt"






FASTQC_OUTPUT_FOLDER = WORKING_FOLDER + "/standard_results/FastQC"

CONTAMINANT_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/contaminant_list.txt"

ADAPTER_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/adapter_list.txt"

PRINSEQ_LITE_FILE = HPPRNA_SOFTWARE_FOLDER + "/prinseq-lite-0.20.4/prinseq-lite.pl"

WIGTOBIGWIG = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/wigToBigWig"

CHROM_SIZES = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/" + ASSEMBLY_VERSION + ".chrom.sizes"

GENOME_FA_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genome.fa"

REPEAT_GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/repeats.gtf"

TOPHAT_CUFFLINK_CUFFDIFF_INDEX_FILE = WORKING_FOLDER + "/standard_results/" + WORKFLOW_NAME + "/Index/" + ASSEMBLY_VERSION

TOPHAT_LNCRNA_INDEX_FILE = WORKING_FOLDER + "/standard_results/lncRNA_denovo/lncRNA_detection/Index/" + ASSEMBLY_VERSION

EXTRACT_UNIQUE = HPPRNA_SOFTWARE_FOLDER + "/BlackOPs_v1.06/perl/extract_unique.pl"

FUSIONCATCHER_DATA_FOLDER = HPPRNA_SOFTWARE_FOLDER + "/FusionCatcher/fusioncatcher/data/mus_musculus/"

THREADS = 15

TOPHAT_MATE_INNER_DIST = 50

TOPHAT_MATE_STD_DEV = 20

TOPHAT_CUFFLINKS_CUFFDIFF_LIBRARY_TYPE = "fr-unstranded"

SUBREAD_MINFRAGLENGTH = 50

SUBREAD_MAXFRAGLENGTH = 600

SUBREAD_PE_ORIENTATION = "fr"

FEATURECOUNTS_STRANDSPECIFIC = "0"

BOWTIE_HISAT_MININS = 0

BOWTIE_HISAT_MAXINS = 800

BOWTIE_HISAT_PE_ORIENTATION = "--fr"

KALLISTO_L = 200

KALLISTO_S = 20

RSEM_FRAGMENT_LENGTH_MIN = 1

RSEM_FRAGMENT_LENGTH_MAX = 1000

RSEM_FRAGMENT_LENGTH_MEAN = -1

RSEM_FRAGMENT_LENGTH_SD = 0

RSEM_FORWARD_PROB = 0.5

BOWTIE_HISAT_NOFW_NORC = " "

EXPRESS_ORIENTATION = " "

DCC_STRAND = "-N"





rule all:
    input:
        expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Processed_FASTQ/{sample}.adapt.qc.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Fasta/{sample}.adapt.qc.collapser.fasta", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/{project}.{workflow}.gene.FPKM.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/{project}.{workflow}.transcript.FPKM.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/DEG/{project}.{workflow}.{pair}.gene.DEG.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/{workflow}/DEG/{project}.{workflow}.{pair}.transcript.DEG.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.genome.sorted.bam", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.genome.sorted.bam.bai", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/NGS_plot/NGSplot.{sample}.genebody.avgprof.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/NGS_plot/NGSplot.{sample}.genebody.heatmap.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/NGS_plot/NGSplot.{sample}.genebody.zip", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Bigwig/{sample}.bw", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.FPKM.clean.txt.1.heatmap.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.FPKM.clean.txt.1.matrix.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.FPKM.clean.txt.1.PCA.pdf", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/{workflow}/Cluster/{project}.{workflow}.gene.FPKM.clean.txt.1.rotation.txt", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, project = PROJECT_NAME)

rule rename_fastq:
        input:
                expand("{work_folder}/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_1)
        output:
                expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2)
        run:
                shell("mkdir -p {WORKING_FOLDER}/standard_results")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Raw_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Processed_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fasta")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/FastQC")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/SNP")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fusion_gene")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index")
                for i in range(len(SAMPLES_1)):
                    single_in = "".join(["{WORKING_FOLDER}/", SAMPLES_1[i], ".fastq"])
                    single_out = "".join(["{WORKING_FOLDER}/standard_results/Raw_FASTQ/", SAMPLES_2[i], ".fastq"])
                    cmd_single = " ".join(["cp", single_in, single_out])
                    shell(cmd_single)



rule fastqc_fisrt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule cutadapt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    shell: """
           cutadapt -a {ADAPTER_SEQUENCE} -m 20 -o {output} {input}
           """



rule fastq_quality_filter:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    shell: """
           fastq_quality_filter -q 20 -p 50 -Q 33 -i {input} -o {output}
           """



rule fastqc_second:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule fastx_collapser:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Fasta/{smp}.adapt.qc.collapser.fasta"
    shell: """
           fastx_collapser -Q 33 -v -i {input} -o {output}
           """




rule rsem_prepare_reference:
    input:
          GTF,
          GENOME_FA_FILE
    output:
          "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/SA",
          "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/SAindex"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/Summary_gene
           mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/Summary_transcript
           rsem-prepare-reference --gtf {GTF} --star -p 1 {GENOME_FA_FILE} {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}
           """




rule rsem_calculate_expression:
    input:
        fastq="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq",
        index_1="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/SA",
        index_2="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/SAindex"
    output:
        bam="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.bam",
        gene_1="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genes.results",
        isoform_1="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.isoforms.results",
        gene_2="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/Summary_gene/{smp}.genes.results",
        isoform_2="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/Summary_transcript/{smp}.isoforms.results"
    threads: THREADS
    shell: """
           rsem-calculate-expression -p {threads} --forward-prob {RSEM_FORWARD_PROB} --star --estimate-rspd --append-names --output-genome-bam --fragment-length-mean {RSEM_FRAGMENT_LENGTH_MEAN} --fragment-length-sd {RSEM_FRAGMENT_LENGTH_SD} {input.fastq} {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION} {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{wildcards.smp}
           cp {output.gene_1} {output.gene_2}
           cp {output.isoform_1} {output.isoform_2}
           """




rule fpkm_matrix:
    input:
         perl_gene=expand("{software}/my_perl/combine_RSEM_gene_results.pl", software = HPPRNA_SOFTWARE_FOLDER),
         perl_transcript=expand("{software}/my_perl/combine_RSEM_transcript_results.pl", software = HPPRNA_SOFTWARE_FOLDER),
         gene=expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/Summary_gene/{sample}.genes.results", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2),
         isoform=expand("{work_folder}/standard_results/{workflow}/Gene_expression_matrix/Summary_transcript/{sample}.isoforms.results", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = SAMPLES_2)
    output:
         gene="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.txt",
         transcript="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.transcript.FPKM.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/combine_RSEM_gene_results.pl -i {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/Summary_gene -o {output.gene}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/combine_RSEM_transcript_results.pl -i {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/Summary_transcript -o {output.transcript}
           """






rule deg_Kidney_vs_Lung:
    input:
         expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.genes.results", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = CLASS_Kidney_vs_Lung)
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.GeneMat.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.gene.DEG.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.transcript.DEG.txt"
    shell: """
           rsem-generate-data-matrix {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_1.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_2.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_3.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_1.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_2.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_3.genes.results > {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.GeneMat.txt
           rsem-run-ebseq {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.GeneMat.txt 3,3 {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.gene.DEG.txt
           rsem-generate-ngvector {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.transcripts.fa {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}
           rsem-generate-data-matrix {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_1.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_2.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_3.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_1.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_2.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_3.isoforms.results > {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.IsoMat.txt
           rsem-run-ebseq --ngvector {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.ngvec {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.IsoMat.txt 3,3 {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Lung.transcript.DEG.txt
           """
rule deg_Kidney_vs_Spleen:
    input:
         expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.genes.results", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = CLASS_Kidney_vs_Spleen)
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.GeneMat.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.gene.DEG.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.transcript.DEG.txt"
    shell: """
           rsem-generate-data-matrix {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_1.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_2.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_3.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_1.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_2.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_3.genes.results > {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.GeneMat.txt
           rsem-run-ebseq {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.GeneMat.txt 3,3 {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.gene.DEG.txt
           rsem-generate-ngvector {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.transcripts.fa {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}
           rsem-generate-data-matrix {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_1.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_2.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_3.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_1.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_2.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Kidney_3.isoforms.results > {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.IsoMat.txt
           rsem-run-ebseq --ngvector {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.ngvec {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.IsoMat.txt 3,3 {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Kidney_vs_Spleen.transcript.DEG.txt
           """
rule deg_Lung_vs_Spleen:
    input:
         expand("{work_folder}/standard_results/{workflow}/Processed_BAM/{sample}.genes.results", work_folder = WORKING_FOLDER, workflow = WORKFLOW_NAME, sample = CLASS_Lung_vs_Spleen)
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.GeneMat.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.gene.DEG.txt",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.transcript.DEG.txt"
    shell: """
           rsem-generate-data-matrix {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_1.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_2.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_3.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_1.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_2.genes.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_3.genes.results > {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.GeneMat.txt
           rsem-run-ebseq {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.GeneMat.txt 3,3 {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.gene.DEG.txt
           rsem-generate-ngvector {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.transcripts.fa {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}
           rsem-generate-data-matrix {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_1.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_2.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Spleen_3.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_1.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_2.isoforms.results {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/R_Lung_3.isoforms.results > {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.IsoMat.txt
           rsem-run-ebseq --ngvector {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index/{ASSEMBLY_VERSION}.ngvec {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.IsoMat.txt 3,3 {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG/{PROJECT_NAME}.{WORKFLOW_NAME}.Lung_vs_Spleen.transcript.DEG.txt
           """




rule sort_bam:
    input:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.bam"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.sorted.bam"
    shell: """
           samtools sort -o {output} {input}
           """



rule index_bam:
    input:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.sorted.bam"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.sorted.bam.bai"
    shell: """
           samtools index {input}
           """



rule ngs_plot:
    input:
         bam="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.sorted.bam",
         bai="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.sorted.bam.bai"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{smp}.genebody.avgprof.pdf",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{smp}.genebody.heatmap.pdf",
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{smp}.genebody.zip"
    shell: """
           ngs.plot.r -G {ASSEMBLY_VERSION} -R genebody -C {input.bam} -O {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot/NGSplot.{wildcards.smp}.genebody -T {wildcards.smp} -L 3000 -RB 0.05 -F rnaseq
           """



rule bam2wig:
    input:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM/{smp}.genome.sorted.bam"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.gz"
    shell: """
           samtools mpileup -BQ0 {input} | perl -ne 'BEGIN{{print "track type=wiggle_0 name={wildcards.smp} maxHeightPixels=64:64:11 color=31,120,180 visibility=full\n"}};($c, $start, undef, $depth) = split; if ($c ne $lastC) {{ print "variableStep chrom=$c\n"; }};$lastC=$c;next unless $. % 5 ==0;print "$start\t$depth\n" unless $depth<3;' | gzip -c > {output}
           """



rule wig2wig2:
    input:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.gz"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.2.gz"
    shell: """
           zcat {input} | sed '1d' | gzip -c > {output}
           """



rule wig22bw:
    input:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.wig.2.gz"
    output:
        "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig/{smp}.bw"
    shell: """
           {WIGTOBIGWIG} {input} {CHROM_SIZES} {output}
           """



rule prepare_fpkm:
    input:
         perl=expand("{software}/my_perl/clean_FPKM_{workflow}.pl", software = HPPRNA_SOFTWARE_FOLDER, workflow = WORKFLOW_NAME),
         txt="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.txt"
    output:
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt"
    shell: """
           perl {input.perl} -i {input.txt} -o {output}
           """



rule heatmap:
    input:
         expand("{software}/my_perl/generate_heatmap_Rscript.pl", software = HPPRNA_SOFTWARE_FOLDER),
         "{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt"
    output:
         R="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.heatmap.R",
         pdf="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt.1.heatmap.pdf"
    shell: """
         perl /data/dops-tree-genome/dops0659/hppRNA_software/my_perl/generate_heatmap_Rscript.pl -i {PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt -d {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster -o {output.R}
         R --slave --vanilla < {output.R}
           """



rule pca:
    input:
         txt="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt",
         perl=expand("{software}/my_perl/generate_PCA_Rscript.pl", software = HPPRNA_SOFTWARE_FOLDER)
    output:
         R="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.PCA.R",
         matrix="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt.1.matrix.txt",
         pdf="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt.1.PCA.pdf",
         rotation="{WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster/{PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt.1.rotation.txt"
    shell: """
           perl {input.perl} -i {PROJECT_NAME}.{WORKFLOW_NAME}.gene.FPKM.clean.txt -d {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster -o {output.R}
           R --slave --vanilla < {output.R}
           """



