


SAMPLES_1 = ["S517N701", "S517N702", "S517N703", "S517N704", "S517N705", "S517N706", "S502N701", "S503N704", "S503N705"]

SAMPLES_2 = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3", "R_Lung_1", "R_Lung_2", "R_Lung_3", "R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

SAMPLE_join = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join = "Kidney;Kidney;Kidney;Lung;Lung;Lung;Spleen;Spleen;Spleen;"




CLASS_Lung = ["R_Lung_1", "R_Lung_2", "R_Lung_3"]

CLASS_Lung_2 = "R_Lung_1;R_Lung_2;R_Lung_3"

CLASS_Kidney = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3"]

CLASS_Kidney_2 = "R_Kidney_1;R_Kidney_2;R_Kidney_3"

CLASS_Spleen = ["R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

CLASS_Spleen_2 = "R_Spleen_1;R_Spleen_2;R_Spleen_3"

CLASS_Kidney_vs_Lung = CLASS_Kidney + CLASS_Lung

SAMPLE_join_Kidney_vs_Lung = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;"

SAMPLE_group_join_Kidney_vs_Lung = "Kidney;Kidney;Kidney;Lung;Lung;Lung;"

CLASS_Kidney_vs_Spleen = CLASS_Kidney + CLASS_Spleen

SAMPLE_join_Kidney_vs_Spleen = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Kidney_vs_Spleen = "Kidney;Kidney;Kidney;Spleen;Spleen;Spleen;"

CLASS_Lung_vs_Spleen = CLASS_Lung + CLASS_Spleen

SAMPLE_join_Lung_vs_Spleen = "R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Lung_vs_Spleen = "Lung;Lung;Lung;Spleen;Spleen;Spleen;"

PAIRS = ["Kidney_vs_Lung", "Kidney_vs_Spleen", "Lung_vs_Spleen"]




PROJECT_NAME = "R_hppRNA_data"

WORKFLOW_NAME = "Tophat_Cufflink_Cuffdiff"

WORKING_FOLDER = "/data/hppRNA_data"

HPPRNA_SOFTWARE_FOLDER = "/data/hppRNA_software"

ADAPTER_SEQUENCE = "AGATCGGAAGAGC"

ASSEMBLY_VERSION = "mm10"

GATK_FOLDER = "/data/hppRNA_software/GATK"



GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/mRNA_lncRNA.gtf"

MAP_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/mRNA_lncRNA.transcript_to_gene.txt"






FASTQC_OUTPUT_FOLDER = WORKING_FOLDER + "/standard_results/FastQC"

CONTAMINANT_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/contaminant_list.txt"

ADAPTER_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/adapter_list.txt"

PRINSEQ_LITE_FILE = HPPRNA_SOFTWARE_FOLDER + "/prinseq-lite-0.20.4/prinseq-lite.pl"

WIGTOBIGWIG = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/wigToBigWig"

CHROM_SIZES = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/" + ASSEMBLY_VERSION + ".chrom.sizes"

GENOME_FA_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genome.fa"

REPEAT_GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/repeats.gtf"

TOPHAT_CUFFLINK_CUFFDIFF_INDEX_FILE = WORKING_FOLDER + "/standard_results/" + WORKFLOW_NAME + "/Index/" + ASSEMBLY_VERSION

TOPHAT_LNCRNA_INDEX_FILE = WORKING_FOLDER + "/standard_results/lncRNA_denovo/lncRNA_detection/Index/" + ASSEMBLY_VERSION

EXTRACT_UNIQUE = HPPRNA_SOFTWARE_FOLDER + "/BlackOPs_v1.06/perl/extract_unique.pl"

FUSIONCATCHER_DATA_FOLDER = HPPRNA_SOFTWARE_FOLDER + "/FusionCatcher/fusioncatcher/data/mus_musculus/"

THREADS = 15

TOPHAT_MATE_INNER_DIST = 50

TOPHAT_MATE_STD_DEV = 20

TOPHAT_CUFFLINKS_CUFFDIFF_LIBRARY_TYPE = "fr-unstranded"

SUBREAD_MINFRAGLENGTH = 50

SUBREAD_MAXFRAGLENGTH = 600

SUBREAD_PE_ORIENTATION = "fr"

FEATURECOUNTS_STRANDSPECIFIC = "0"

BOWTIE_HISAT_MININS = 0

BOWTIE_HISAT_MAXINS = 800

BOWTIE_HISAT_PE_ORIENTATION = "--fr"

KALLISTO_L = 200

KALLISTO_S = 20

RSEM_FRAGMENT_LENGTH_MIN = 1

RSEM_FRAGMENT_LENGTH_MAX = 1000

RSEM_FRAGMENT_LENGTH_MEAN = -1

RSEM_FRAGMENT_LENGTH_SD = 0

RSEM_FORWARD_PROB = 0.5

BOWTIE_HISAT_NOFW_NORC = " "

EXPRESS_ORIENTATION = " "

DCC_STRAND = "-N"





rule all:
    input:
        expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Processed_FASTQ/{sample}.adapt.qc.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Fasta/{sample}.adapt.qc.collapser.fasta", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}_thout/accepted_hits.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}_thout/align_summary.txt", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}_align_summary.txt", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.rmdup.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.sam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.unique.sam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.unique.bam.bai", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{sample}_clout/transcripts.gtf", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.result", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.noncoding.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/denovo_lncRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{sample}.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{project}.lncRNA_denovo.transcript.TPM.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{project}.lncRNA_denovo.gene.TPM.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{project}.lncRNA_denovo.{pair}.transcript.DEG.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{project}.lncRNA_denovo.{pair}.gene.DEG.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{project}.lncRNA_denovo.gene.TPM.clean.txt.1.heatmap.pdf", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{project}.lncRNA_denovo.gene.TPM.clean.txt.1.PCA.pdf", work_folder = WORKING_FOLDER, project = PROJECT_NAME)

rule rename_fastq:
        input:
                expand("{work_folder}/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_1)
        output:
                expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2)
        run:
                shell("mkdir -p {WORKING_FOLDER}/standard_results")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Raw_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Processed_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fasta")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/FastQC")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/SNP")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fusion_gene")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index")
                for i in range(len(SAMPLES_1)):
                    single_in = "".join(["{WORKING_FOLDER}/", SAMPLES_1[i], ".fastq"])
                    single_out = "".join(["{WORKING_FOLDER}/standard_results/Raw_FASTQ/", SAMPLES_2[i], ".fastq"])
                    cmd_single = " ".join(["cp", single_in, single_out])
                    shell(cmd_single)



rule fastqc_fisrt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule cutadapt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    shell: """
           cutadapt -a {ADAPTER_SEQUENCE} -m 20 -o {output} {input}
           """



rule fastq_quality_filter:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    shell: """
           fastq_quality_filter -q 20 -p 50 -Q 33 -i {input} -o {output}
           """



rule fastqc_second:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule fastx_collapser:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Fasta/{smp}.adapt.qc.collapser.fasta"
    shell: """
           fastx_collapser -Q 33 -v -i {input} -o {output}
           """




rule bowtie2_build:
    input:
        GENOME_FA_FILE
    output:
        fa="{TOPHAT_LNCRNA_INDEX_FILE}.fa",
        index_1="{TOPHAT_LNCRNA_INDEX_FILE}.1.bt2",
        index_2="{TOPHAT_LNCRNA_INDEX_FILE}.2.bt2",
        index_3="{TOPHAT_LNCRNA_INDEX_FILE}.3.bt2",
        index_4="{TOPHAT_LNCRNA_INDEX_FILE}.4.bt2",
        index_5="{TOPHAT_LNCRNA_INDEX_FILE}.rev.1.bt2",
        index_6="{TOPHAT_LNCRNA_INDEX_FILE}.rev.2.bt2"
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Index
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM
           cp {input} {output.fa}
           bowtie2-build --threads {threads} {output.fa} {TOPHAT_LNCRNA_INDEX_FILE}
           """



rule tophat2:
    input:
        fastq="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq",
        index_1=expand("{index_file}.1.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_2=expand("{index_file}.2.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_3=expand("{index_file}.3.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_4=expand("{index_file}.4.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_5=expand("{index_file}.rev.1.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_6=expand("{index_file}.rev.2.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE)
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/accepted_hits.bam",
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/align_summary.txt"
    threads: THREADS
    shell: """
           tophat2 -p {threads} --library-type {TOPHAT_LIBRARY_TYPE} -G {GTF} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{wildcards.smp}_thout {TOPHAT_LNCRNA_INDEX_FILE} {input.fastq}
           """



rule copy_summary:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/align_summary.txt"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_align_summary.txt"
    shell: """
           cp {input} {output}
           """



rule sort_bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/accepted_hits.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.bam"
    shell: """
           samtools sort -o {output} {input}
           """




rule rmdup_bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.rmdup.bam"
    shell: """
           samtools rmdup -s {input} {output}
           """




rule bam2sam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.sam"
    shell: """
           samtools view -h {input} > {output}
           """



rule select_unique_mapping:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.sam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.sam"
    shell: """
           perl {EXTRACT_UNIQUE} --input_sam {input} --output {output} --aligner T
           """



rule sam2bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.sam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam"
    shell: """
           samtools view -S -b -o {output} {input}
           """



rule index_bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam.bai"
    shell: """
           samtools index {input}
           """



rule cufflinks:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{smp}_clout/transcripts.gtf"
    threads: THREADS
    shell: """
           cufflinks -p {threads} --library-type {CUFFLINKS_LIBRARY_TYPE} -g {GTF} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{wildcards.smp}_clout {input}
           """



rule cuffmerge:
    input:
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{sample}_clout/transcripts.gtf", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
    output:
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf", work_folder = WORKING_FOLDER)
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_cuffmerge_assembly_list.pl -d {WORKING_FOLDER} -s "{SAMPLE_join}" -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt
           cuffmerge -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly -g {GTF} -s {GENOME_FA_FILE} -p {threads} {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt
           """



rule cuffcompare:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.gtf"
    threads: THREADS
    shell: """
           cuffcompare -r {GTF} -s {GENOME_FA_FILE} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf
           """



rule select_cuffcompare_class_code:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf"
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/select_cuffcompare_class_code.pl -i {input} -o {output}
           """



rule iSeeRNA:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.result"
    threads: THREADS
    shell: """
           iSeeRNA -c {HPPRNA_SOFTWARE_FOLDER}/iSeeRNA-1.2.2/conf/{ASSEMBLY_VERSION}.conf -i {input} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA
           cd {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA
           make
           """



rule identify_noncoding:
    input:
        result="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.result",
        gtf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.noncoding.gtf"
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/identify_noncoding.pl -i {input.result} -j {input.gtf} -o {output}
           """



rule compile_gtf:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.noncoding.gtf"
    output:
        denovo_map="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/denovo_lncRNA.transcript_to_gene.txt",
        all_map="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt",
        all_gtf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.gtf"
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/get_transcript_to_gene_table.pl -i {input} -o {output.denovo_map}
           cat {output.denovo_map} {MAP_FILE} > {output.all_map}
           cat {input} {GTF} > {output.all_gtf}
           """



rule kallisto_index:
    input:
         fa=expand("{software}/hppRNA_genome/{assembly}/genome.fa", software = HPPRNA_SOFTWARE_FOLDER, assembly = ASSEMBLY_VERSION),
         gtf=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.gtf", work_folder = WORKING_FOLDER)
    output:
         fa="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/{ASSEMBLY_VERSION}.transcript.fa",
         idx="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/{ASSEMBLY_VERSION}.transcript.idx"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/NGS_plot
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Bigwig
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary
           gffread -w {output.fa} -g {input.fa} {input.gtf}
           kallisto index -i {output.idx} {output.fa}
           """



rule quant:
    input:
          fastq="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq",
          idx=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/{assembly}.transcript.idx", work_folder = WORKING_FOLDER, assembly = ASSEMBLY_VERSION)
    output:
          sam="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{smp}.sam",
          h5="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{smp}/kallisto/abundance.h5",
          tsv_1="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{smp}/kallisto/abundance.tsv",
          json="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{smp}/kallisto/run_info.json",
          tsv_2="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary/{smp}.abundance.tsv"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{wildcards.smp}
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{wildcards.smp}/kallisto
           kallisto quant --pseudobam -i {input.idx} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{wildcards.smp}/kallisto -b 100 --single -l {KALLISTO_L} -s {KALLISTO_S} {input.fastq} > {output.sam}
           cp {output.tsv_1} {output.tsv_2}
           """



rule sam2bam_2:
    input:
          "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{smp}.sam"
    output:
          "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{smp}.bam"
    shell: """
           samtools view -S -b -o {output} {input}
           """



rule matrix:
    input:
          tsv=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary/{sample}.abundance.tsv", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
          txt=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER)
    output:
          transcript="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{PROJECT_NAME}.lncRNA_denovo.transcript.TPM.txt",
          gene="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/combine_kallisto_results.pl -i {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary -j {input.txt} -o {output.transcript}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/sleuth_transcript2gene.pl -i {input.txt} -j {output.transcript} -o {output.gene}
           """



rule deg_Kidney_vs_Lung:
    input:
         map=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
         h5=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.h5", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Lung),
         tsv=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.tsv", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Lung),
         json=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/run_info.json", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Lung)
    output:
         R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Kidney_vs_Lung.sleuth.R",
         transcript="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Kidney_vs_Lung.transcript.DEG.txt",
         gene="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Kidney_vs_Lung.gene.DEG.txt"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Kidney_1 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Kidney_2 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Kidney_3 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Lung_1 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Lung_2 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Lung_3 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Lung/
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_comparison_info_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG -s "{SAMPLE_join_Kidney_vs_Lung}" -g "{SAMPLE_group_join_Kidney_vs_Lung}" -c "Kidney:Lung;"
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_sleuth_Rscript_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification -c "Kidney:Lung;" -o {output.R}
           R --slave --vanilla < {output.R}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/sleuth_DEG_gene.pl -i {input.map} -j {output.transcript} -o {output.gene}
           """


rule deg_Kidney_vs_Spleen:
    input:
         map=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
         h5=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.h5", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Spleen),
         tsv=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.tsv", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Spleen),
         json=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/run_info.json", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Spleen)
    output:
         R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Kidney_vs_Spleen.sleuth.R",
         transcript="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Kidney_vs_Spleen.transcript.DEG.txt",
         gene="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Kidney_vs_Spleen.gene.DEG.txt"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Kidney_1 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Kidney_2 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Kidney_3 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Spleen_1 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Spleen_2 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Spleen_3 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Kidney_vs_Spleen/
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_comparison_info_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG -s "{SAMPLE_join_Kidney_vs_Spleen}" -g "{SAMPLE_group_join_Kidney_vs_Spleen}" -c "Kidney:Spleen;"
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_sleuth_Rscript_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification -c "Kidney:Spleen;" -o {output.R}
           R --slave --vanilla < {output.R}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/sleuth_DEG_gene.pl -i {input.map} -j {output.transcript} -o {output.gene}
           """


rule deg_Lung_vs_Spleen:
    input:
         map=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
         h5=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.h5", work_folder = WORKING_FOLDER, sample = CLASS_Lung_vs_Spleen),
         tsv=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.tsv", work_folder = WORKING_FOLDER, sample = CLASS_Lung_vs_Spleen),
         json=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/run_info.json", work_folder = WORKING_FOLDER, sample = CLASS_Lung_vs_Spleen)
    output:
         R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Lung_vs_Spleen.sleuth.R",
         transcript="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Lung_vs_Spleen.transcript.DEG.txt",
         gene="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.Lung_vs_Spleen.gene.DEG.txt"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Lung_1 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Lung_2 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Lung_3 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Spleen_1 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Spleen_2 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_Spleen_3 {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/Lung_vs_Spleen/
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_comparison_info_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG -s "{SAMPLE_join_Lung_vs_Spleen}" -g "{SAMPLE_group_join_Lung_vs_Spleen}" -c "Lung:Spleen;"
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_sleuth_Rscript_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification -c "Lung:Spleen;" -o {output.R}
           R --slave --vanilla < {output.R}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/sleuth_DEG_gene.pl -i {input.map} -j {output.transcript} -o {output.gene}
           """



rule clean_tpm:
    input:
         "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.txt"
    output:
         "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/clean_FPKM_STAR_RSEM_EBSeq.pl -i {input} -o {output}
           """



rule heatmap:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt"
    output:
        R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.heatmap.R",
        pdf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.heatmap.pdf"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_heatmap_Rscript.pl -i {PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster -o {output.R}
           R --slave --vanilla < {output.R}
           """



rule pca:
    input:
         "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt"
    output:
         R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.PCA.R",
         matrix="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.matrix.txt",
         pdf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.PCA.pdf",
         rotation="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.rotation.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_PCA_Rscript.pl -i {PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster -o {output.R}
           R --slave --vanilla < {output.R}
           """



