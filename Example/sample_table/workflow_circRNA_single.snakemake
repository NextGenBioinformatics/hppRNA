


SAMPLES_1 = ["S517N701", "S517N702", "S517N703", "S517N704", "S517N705", "S517N706", "S502N701", "S503N704", "S503N705"]

SAMPLES_2 = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3", "R_Lung_1", "R_Lung_2", "R_Lung_3", "R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

SAMPLE_join = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join = "Kidney;Kidney;Kidney;Lung;Lung;Lung;Spleen;Spleen;Spleen;"




CLASS_Lung = ["R_Lung_1", "R_Lung_2", "R_Lung_3"]

CLASS_Lung_2 = "R_Lung_1;R_Lung_2;R_Lung_3"

CLASS_Kidney = ["R_Kidney_1", "R_Kidney_2", "R_Kidney_3"]

CLASS_Kidney_2 = "R_Kidney_1;R_Kidney_2;R_Kidney_3"

CLASS_Spleen = ["R_Spleen_1", "R_Spleen_2", "R_Spleen_3"]

CLASS_Spleen_2 = "R_Spleen_1;R_Spleen_2;R_Spleen_3"

CLASS_Kidney_vs_Lung = CLASS_Kidney + CLASS_Lung

SAMPLE_join_Kidney_vs_Lung = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Lung_1;R_Lung_2;R_Lung_3;"

SAMPLE_group_join_Kidney_vs_Lung = "Kidney;Kidney;Kidney;Lung;Lung;Lung;"

CLASS_Kidney_vs_Spleen = CLASS_Kidney + CLASS_Spleen

SAMPLE_join_Kidney_vs_Spleen = "R_Kidney_1;R_Kidney_2;R_Kidney_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Kidney_vs_Spleen = "Kidney;Kidney;Kidney;Spleen;Spleen;Spleen;"

CLASS_Lung_vs_Spleen = CLASS_Lung + CLASS_Spleen

SAMPLE_join_Lung_vs_Spleen = "R_Lung_1;R_Lung_2;R_Lung_3;R_Spleen_1;R_Spleen_2;R_Spleen_3;"

SAMPLE_group_join_Lung_vs_Spleen = "Lung;Lung;Lung;Spleen;Spleen;Spleen;"

PAIRS = ["Kidney_vs_Lung", "Kidney_vs_Spleen", "Lung_vs_Spleen"]




PROJECT_NAME = "R_hppRNA_data"

WORKFLOW_NAME = "Tophat_Cufflink_Cuffdiff"

WORKING_FOLDER = "/data/hppRNA_data"

HPPRNA_SOFTWARE_FOLDER = "/data/hppRNA_software"

ADAPTER_SEQUENCE = "AGATCGGAAGAGC"

ASSEMBLY_VERSION = "mm10"

GATK_FOLDER = "/data/hppRNA_software/GATK"



GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genes.selected.pc.gtf"

MAP_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/transcript_to_gene.txt"






FASTQC_OUTPUT_FOLDER = WORKING_FOLDER + "/standard_results/FastQC"

CONTAMINANT_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/contaminant_list.txt"

ADAPTER_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/adapter_list.txt"

PRINSEQ_LITE_FILE = HPPRNA_SOFTWARE_FOLDER + "/prinseq-lite-0.20.4/prinseq-lite.pl"

WIGTOBIGWIG = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/wigToBigWig"

CHROM_SIZES = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/" + ASSEMBLY_VERSION + ".chrom.sizes"

GENOME_FA_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genome.fa"

REPEAT_GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/repeats.gtf"

TOPHAT_CUFFLINK_CUFFDIFF_INDEX_FILE = WORKING_FOLDER + "/standard_results/" + WORKFLOW_NAME + "/Index/" + ASSEMBLY_VERSION

TOPHAT_LNCRNA_INDEX_FILE = WORKING_FOLDER + "/standard_results/lncRNA_denovo/lncRNA_detection/Index/" + ASSEMBLY_VERSION

EXTRACT_UNIQUE = HPPRNA_SOFTWARE_FOLDER + "/BlackOPs_v1.06/perl/extract_unique.pl"

FUSIONCATCHER_DATA_FOLDER = HPPRNA_SOFTWARE_FOLDER + "/FusionCatcher/fusioncatcher/data/mus_musculus/"

THREADS = 15

TOPHAT_MATE_INNER_DIST = 50

TOPHAT_MATE_STD_DEV = 20

TOPHAT_CUFFLINKS_CUFFDIFF_LIBRARY_TYPE = "fr-unstranded"

SUBREAD_MINFRAGLENGTH = 50

SUBREAD_MAXFRAGLENGTH = 600

SUBREAD_PE_ORIENTATION = "fr"

FEATURECOUNTS_STRANDSPECIFIC = "0"

BOWTIE_HISAT_MININS = 0

BOWTIE_HISAT_MAXINS = 800

BOWTIE_HISAT_PE_ORIENTATION = "--fr"

KALLISTO_L = 200

KALLISTO_S = 20

RSEM_FRAGMENT_LENGTH_MIN = 1

RSEM_FRAGMENT_LENGTH_MAX = 1000

RSEM_FRAGMENT_LENGTH_MEAN = -1

RSEM_FRAGMENT_LENGTH_SD = 0

RSEM_FORWARD_PROB = 0.5

BOWTIE_HISAT_NOFW_NORC = " "

EXPRESS_ORIENTATION = " "

DCC_STRAND = "-N"





rule all:
    input:
        expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Processed_FASTQ/{sample}.adapt.qc.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.adapt.qc_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Fasta/{sample}.adapt.qc.collapser.fasta", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam.bai", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Chimeric.out.junction", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/CircRNA/DCC/CircCoordinates", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/DCC/CircRNACount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/DCC/CircSkipJunctions", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/DCC/LinearCount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/{pair}/CircCoordinates", work_folder = WORKING_FOLDER, pair = PAIRS),
        expand("{work_folder}/standard_results/CircRNA/CircTest/{pair}/CircRNACount", work_folder = WORKING_FOLDER, pair = PAIRS),
        expand("{work_folder}/standard_results/CircRNA/CircTest/{pair}/CircSkipJunctions", work_folder = WORKING_FOLDER, pair = PAIRS),
        expand("{work_folder}/standard_results/CircRNA/CircTest/{pair}/LinearCount", work_folder = WORKING_FOLDER, pair = PAIRS),
        expand("{work_folder}/standard_results/CircRNA/CircTest/{pair}/{project}.STAR_DCC_circTest.{pair}.circTest.csv", work_folder = WORKING_FOLDER, pair = PAIRS, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/CircRNA/CircTest/{pair}/{project}.STAR_DCC_circTest.{pair}.circTest.txt", work_folder = WORKING_FOLDER, pair = PAIRS, project = PROJECT_NAME)

rule rename_fastq:
        input:
                expand("{work_folder}/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_1)
        output:
                expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2)
        run:
                shell("mkdir -p {WORKING_FOLDER}/standard_results")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Raw_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Processed_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fasta")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/FastQC")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/SNP")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fusion_gene")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Processed_BAM")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Gene_expression_matrix")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/DEG")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/NGS_plot")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Bigwig")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Cluster")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/{WORKFLOW_NAME}/Index")
                for i in range(len(SAMPLES_1)):
                    single_in = "".join(["{WORKING_FOLDER}/", SAMPLES_1[i], ".fastq"])
                    single_out = "".join(["{WORKING_FOLDER}/standard_results/Raw_FASTQ/", SAMPLES_2[i], ".fastq"])
                    cmd_single = " ".join(["cp", single_in, single_out])
                    shell(cmd_single)



rule fastqc_fisrt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule cutadapt:
    input:
        "{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    shell: """
           cutadapt -a {ADAPTER_SEQUENCE} -m 20 -o {output} {input}
           """



rule fastq_quality_filter:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    shell: """
           fastq_quality_filter -q 20 -p 50 -Q 33 -i {input} -o {output}
           """



rule fastqc_second:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.adapt.qc_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input}
           """



rule fastx_collapser:
    input:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Fasta/{smp}.adapt.qc.collapser.fasta"
    shell: """
           fastx_collapser -Q 33 -v -i {input} -o {output}
           """




rule STAR_index:
    input:
        GENOME_FA_FILE
    output:
        "{WORKING_FOLDER}/standard_results/CircRNA/Index/SA",
        "{WORKING_FOLDER}/standard_results/CircRNA/Index/SAindex"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/Mapping
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/CircTest
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/Index
           STAR --runMode genomeGenerate --genomeDir {WORKING_FOLDER}/standard_results/CircRNA/Index --genomeFastaFiles {input} --runThreadN 1
           """



rule star_joint_mapping:
    input:
        fastq="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.qc.fastq",
        index_1="{WORKING_FOLDER}/standard_results/CircRNA/Index/SA",
        index_2="{WORKING_FOLDER}/standard_results/CircRNA/Index/SAindex"
    output:
        "{WORKING_FOLDER}/standard_results/CircRNA/Mapping/{smp}/single_mapping/{smp}.Aligned.sortedByCoord.out.bam",
        "{WORKING_FOLDER}/standard_results/CircRNA/Mapping/{smp}/single_mapping/{smp}.Chimeric.out.junction"
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/Mapping/{wildcards.smp}
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/Mapping/{wildcards.smp}/single_mapping
           STAR --runThreadN {threads} --genomeDir {WORKING_FOLDER}/standard_results/CircRNA/Index --outSAMtype BAM SortedByCoordinate --readFilesIn {input.fastq} --outFileNamePrefix {WORKING_FOLDER}/standard_results/CircRNA/Mapping/{wildcards.smp}/single_mapping/{wildcards.smp}. --outReadsUnmapped Fastx --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --outFilterMultimapNmax 20 --outFilterScoreMin 1 --outFilterMatchNmin 1 --outFilterMismatchNmax 2 --chimSegmentMin 15 --chimScoreMin 15 --chimScoreSeparation 10 --chimJunctionOverhangMin 15
           """



rule index_bam:
    input:
        "{WORKING_FOLDER}/standard_results/CircRNA/Mapping/{smp}/single_mapping/{smp}.Aligned.sortedByCoord.out.bam"
    output:
        "{WORKING_FOLDER}/standard_results/CircRNA/Mapping/{smp}/single_mapping/{smp}.Aligned.sortedByCoord.out.bam.bai"
    threads: THREADS
    shell: """
           samtools index {input}
           """



rule DCC:
    input:
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam.bai", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Chimeric.out.junction", work_folder = WORKING_FOLDER, sample = SAMPLES_2)
    output:
        "{WORKING_FOLDER}/standard_results/CircRNA/DCC/CircCoordinates",
        "{WORKING_FOLDER}/standard_results/CircRNA/DCC/CircRNACount",
        "{WORKING_FOLDER}/standard_results/CircRNA/DCC/CircSkipJunctions",
        "{WORKING_FOLDER}/standard_results/CircRNA/DCC/LinearCount"
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/DCC
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DCC_samplesheet_all.pl -d {WORKING_FOLDER}/standard_results/CircRNA/Mapping -s "{SAMPLE_join}" -n single -o {WORKING_FOLDER}/standard_results/CircRNA/DCC/samplesheet
           cd {WORKING_FOLDER}/standard_results/CircRNA/DCC
           DCC @samplesheet -O {WORKING_FOLDER}/standard_results/CircRNA/DCC -T {threads} -D {DCC_STRAND} -R {REPEAT_GTF} -an {GTF} -Pi -F -M -Nr 5 3 -fg -G -A {GENOME_FA_FILE}
           """



rule circRNA_Kidney_vs_Lung:
    input:
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Lung),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam.bai", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Lung),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Chimeric.out.junction", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Lung)
    output:
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/CircCoordinates", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/CircRNACount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/CircSkipJunctions", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/LinearCount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/{project}.STAR_DCC_circTest.Kidney_vs_Lung.circTest.csv", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/{project}.STAR_DCC_circTest.Kidney_vs_Lung.circTest.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME)
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Lung
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DCC_samplesheet.pl -d {WORKING_FOLDER}/standard_results/CircRNA/Mapping -c "{CLASS_Kidney_2}" -t "{CLASS_Lung_2}" -n single -o {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Lung/samplesheet
           cd {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Lung
           DCC @samplesheet -O {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Lung -T {threads} -D {DCC_STRAND} -R {REPEAT_GTF} -an {GTF} -Pi -F -M -Nr 5 3 -fg -G -A {GENOME_FA_FILE}
           R --slave --vanilla --args {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Lung 3 3 Kidney Lung {PROJECT_NAME} < {HPPRNA_SOFTWARE_FOLDER}/my_R/circTest.R
           """
rule circRNA_Kidney_vs_Spleen:
    input:
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Spleen),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam.bai", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Spleen),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Chimeric.out.junction", work_folder = WORKING_FOLDER, sample = CLASS_Kidney_vs_Spleen)
    output:
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/CircCoordinates", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/CircRNACount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/CircSkipJunctions", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/LinearCount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/{project}.STAR_DCC_circTest.Kidney_vs_Spleen.circTest.csv", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/{project}.STAR_DCC_circTest.Kidney_vs_Spleen.circTest.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME)
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DCC_samplesheet.pl -d {WORKING_FOLDER}/standard_results/CircRNA/Mapping -c "{CLASS_Kidney_2}" -t "{CLASS_Spleen_2}" -n single -o {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen/samplesheet
           cd {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen
           DCC @samplesheet -O {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen -T {threads} -D {DCC_STRAND} -R {REPEAT_GTF} -an {GTF} -Pi -F -M -Nr 5 3 -fg -G -A {GENOME_FA_FILE}
           R --slave --vanilla --args {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Kidney_vs_Spleen 3 3 Kidney Spleen {PROJECT_NAME} < {HPPRNA_SOFTWARE_FOLDER}/my_R/circTest.R
           """
rule circRNA_Lung_vs_Spleen:
    input:
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam", work_folder = WORKING_FOLDER, sample = CLASS_Lung_vs_Spleen),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Aligned.sortedByCoord.out.bam.bai", work_folder = WORKING_FOLDER, sample = CLASS_Lung_vs_Spleen),
        expand("{work_folder}/standard_results/CircRNA/Mapping/{sample}/single_mapping/{sample}.Chimeric.out.junction", work_folder = WORKING_FOLDER, sample = CLASS_Lung_vs_Spleen)
    output:
        expand("{work_folder}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/CircCoordinates", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/CircRNACount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/CircSkipJunctions", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/LinearCount", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/{project}.STAR_DCC_circTest.Lung_vs_Spleen.circTest.csv", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/{project}.STAR_DCC_circTest.Lung_vs_Spleen.circTest.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME)
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Lung_vs_Spleen
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_DCC_samplesheet.pl -d {WORKING_FOLDER}/standard_results/CircRNA/Mapping -c "{CLASS_Lung_2}" -t "{CLASS_Spleen_2}" -n single -o {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Lung_vs_Spleen/samplesheet
           cd {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Lung_vs_Spleen
           DCC @samplesheet -O {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Lung_vs_Spleen -T {threads} -D {DCC_STRAND} -R {REPEAT_GTF} -an {GTF} -Pi -F -M -Nr 5 3 -fg -G -A {GENOME_FA_FILE}
           R --slave --vanilla --args {WORKING_FOLDER}/standard_results/CircRNA/CircTest/Lung_vs_Spleen 3 3 Lung Spleen {PROJECT_NAME} < {HPPRNA_SOFTWARE_FOLDER}/my_R/circTest.R
           """
