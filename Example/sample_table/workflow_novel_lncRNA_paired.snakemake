


SAMPLES_1 = ["ERR315477", "ERR315455", "ERR315432", "ERR315352", "ERR315456", "ERR315391"]

SAMPLES_2 = ["R_brain_3b", "R_brain_3c", "R_brain_a", "R_testis_7a", "R_testis_7b", "R_testis_7c"]

SAMPLE_join = "R_brain_3b;R_brain_3c;R_brain_a;R_testis_7a;R_testis_7b;R_testis_7c;"

SAMPLE_group_join = "brain;brain;brain;testis;testis;testis;"




CLASS_testis = ["R_testis_7a", "R_testis_7b", "R_testis_7c"]

CLASS_testis_2 = "R_testis_7a;R_testis_7b;R_testis_7c"

CLASS_brain = ["R_brain_3b", "R_brain_3c", "R_brain_a"]

CLASS_brain_2 = "R_brain_3b;R_brain_3c;R_brain_a"

CLASS_testis_vs_brain = CLASS_testis + CLASS_brain

SAMPLE_join_testis_vs_brain = "R_testis_7a;R_testis_7b;R_testis_7c;R_brain_3b;R_brain_3c;R_brain_a;"

SAMPLE_group_join_testis_vs_brain = "testis;testis;testis;brain;brain;brain;"

PAIRS = ["testis_vs_brain"]




PROJECT_NAME = "R_hppRNA_data"

WORKFLOW_NAME = "Tophat_Cufflink_Cuffdiff"

WORKING_FOLDER = "/data/hppRNA_data"

HPPRNA_SOFTWARE_FOLDER = "/data/hppRNA_software"

ADAPTER_SEQUENCE = "AGATCGGAAGAGC"

ASSEMBLY_VERSION = "hg19"

GATK_FOLDER = "/data/hppRNA_software/GATK"



GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/mRNA_lncRNA.gtf"

MAP_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/mRNA_lncRNA.transcript_to_gene.txt"






FASTQC_OUTPUT_FOLDER = WORKING_FOLDER + "/standard_results/FastQC"

CONTAMINANT_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/contaminant_list.txt"

ADAPTER_LIST_FILE = HPPRNA_SOFTWARE_FOLDER + "/FastQC/Configuration/adapter_list.txt"

PRINSEQ_LITE_FILE = HPPRNA_SOFTWARE_FOLDER + "/prinseq-lite-0.20.4/prinseq-lite.pl"

WIGTOBIGWIG = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/wigToBigWig"

CHROM_SIZES = HPPRNA_SOFTWARE_FOLDER + "/wig2bigwig/" + ASSEMBLY_VERSION + ".chrom.sizes"

GENOME_FA_FILE = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/genome.fa"

REPEAT_GTF = HPPRNA_SOFTWARE_FOLDER + "/hppRNA_genome/" + ASSEMBLY_VERSION + "/repeats.gtf"

TOPHAT_CUFFLINK_CUFFDIFF_INDEX_FILE = WORKING_FOLDER + "/standard_results/" + WORKFLOW_NAME + "/Index/" + ASSEMBLY_VERSION

TOPHAT_LNCRNA_INDEX_FILE = WORKING_FOLDER + "/standard_results/lncRNA_denovo/lncRNA_detection/Index/" + ASSEMBLY_VERSION

EXTRACT_UNIQUE = HPPRNA_SOFTWARE_FOLDER + "/BlackOPs_v1.06/perl/extract_unique.pl"

FUSIONCATCHER_DATA_FOLDER = HPPRNA_SOFTWARE_FOLDER + "/FusionCatcher/fusioncatcher/data/current/"

THREADS = 15

TOPHAT_MATE_INNER_DIST = 50

TOPHAT_MATE_STD_DEV = 20

TOPHAT_CUFFLINKS_CUFFDIFF_LIBRARY_TYPE = "fr-unstranded"

SUBREAD_MINFRAGLENGTH = 50

SUBREAD_MAXFRAGLENGTH = 600

SUBREAD_PE_ORIENTATION = "fr"

FEATURECOUNTS_STRANDSPECIFIC = "0"

BOWTIE_HISAT_MININS = 0

BOWTIE_HISAT_MAXINS = 800

BOWTIE_HISAT_PE_ORIENTATION = "--fr"

KALLISTO_L = 200

KALLISTO_S = 20

RSEM_FRAGMENT_LENGTH_MIN = 1

RSEM_FRAGMENT_LENGTH_MAX = 1000

RSEM_FRAGMENT_LENGTH_MEAN = -1

RSEM_FRAGMENT_LENGTH_SD = 0

RSEM_FORWARD_PROB = 0.5

BOWTIE_HISAT_NOFW_NORC = " "

EXPRESS_ORIENTATION = " "

DCC_STRAND = "-N"





rule all:
    input:
        expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.R1.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.R2.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.R1_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.R1_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.R2_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}.R2_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Processed_FASTQ/{sample}_1.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Processed_FASTQ/{sample}_2.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_1_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_1_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_2_fastqc.zip", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/FastQC/{sample}_2_fastqc.html", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Fasta/{sample}_1.collapser.fasta", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/Fasta/{sample}_2.collapser.fasta", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}_thout/accepted_hits.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}_thout/align_summary.txt", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}_align_summary.txt", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.rmdup.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.sam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.unique.sam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.unique.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{sample}.sorted.unique.bam.bai", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{sample}_clout/transcripts.gtf", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.result", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.noncoding.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/denovo_lncRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.gtf", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{sample}.bam", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{project}.lncRNA_denovo.transcript.TPM.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{project}.lncRNA_denovo.gene.TPM.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{project}.lncRNA_denovo.{pair}.transcript.DEG.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{project}.lncRNA_denovo.{pair}.gene.DEG.txt", work_folder = WORKING_FOLDER, project = PROJECT_NAME, pair = PAIRS),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{project}.lncRNA_denovo.gene.TPM.clean.txt.1.heatmap.pdf", work_folder = WORKING_FOLDER, project = PROJECT_NAME),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{project}.lncRNA_denovo.gene.TPM.clean.txt.1.PCA.pdf", work_folder = WORKING_FOLDER, project = PROJECT_NAME)




rule rename_fastq:
        input:
                R1=expand("{work_folder}/{sample}.R1.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_1), 
                R2=expand("{work_folder}/{sample}.R2.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_1)
        output:
                R1=expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.R1.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
                R2=expand("{work_folder}/standard_results/Raw_FASTQ/{sample}.R2.fastq", work_folder = WORKING_FOLDER, sample = SAMPLES_2)
        run:
                shell("mkdir -p {WORKING_FOLDER}/standard_results")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Raw_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Processed_FASTQ")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fasta")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/FastQC")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/SNP")
                shell("mkdir -p {WORKING_FOLDER}/standard_results/Fusion_gene")
                for i in range(len(SAMPLES_1)):
                    left_in = "".join(["{WORKING_FOLDER}/", SAMPLES_1[i], ".R1.fastq"])
                    right_in = "".join(["{WORKING_FOLDER}/", SAMPLES_1[i], ".R2.fastq"])
                    left_out = "".join(["{WORKING_FOLDER}/standard_results/Raw_FASTQ/", SAMPLES_2[i], ".R1.fastq"])
                    right_out = "".join(["{WORKING_FOLDER}/standard_results/Raw_FASTQ/", SAMPLES_2[i], ".R2.fastq"])
                    cmd_left = " ".join(["cp", left_in, left_out])
                    cmd_right = " ".join(["cp", right_in, right_out])
                    shell(cmd_left)
                    shell(cmd_right)



rule fastqc_fisrt:
    input:
        R1="{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.R1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.R2.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.R1_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.R1_fastqc.html",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.R2_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}.R2_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input.R1}
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input.R2}
    """



rule cutadapt:
    input:
        R1="{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.R1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Raw_FASTQ/{smp}.R2.fastq"
    output:
        R1="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.R1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.R2.fastq"
    shell: """
           cutadapt -a {ADAPTER_SEQUENCE} -A {ADAPTER_SEQUENCE} -m 20 -o {output.R1} -p {output.R2} {input.R1} {input.R2}
           """



rule prinseq:
    input:
        R1="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.R1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}.adapt.R2.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_1.fastq",
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_2.fastq",
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_1_singletons.fastq",
        "{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_2_singletons.fastq"
    shell: """
           perl {PRINSEQ_LITE_FILE} -trim_qual_left 20 -trim_qual_right 20 -min_len 20 -min_qual_mean 20 -ns_max_n 2 -out_format 3 -no_qual_header -fastq {input.R1} -fastq2 {input.R2} -out_good {WORKING_FOLDER}/standard_results/Processed_FASTQ/{wildcards.smp} -out_bad null
           """



rule fastqc_second:
    input:
        R1="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_2.fastq"
    output:
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_1_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_1_fastqc.html",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_2_fastqc.zip",
        "{WORKING_FOLDER}/standard_results/FastQC/{smp}_2_fastqc.html"
    threads: THREADS
    shell: """
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input.R1}
           fastqc -o {FASTQC_OUTPUT_FOLDER} --contaminants {CONTAMINANT_LIST_FILE} --adapters {ADAPTER_LIST_FILE} --threads {threads} {input.R2}
           """



rule fastx_collapser:
    input:
        R1="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_2.fastq"
    output:
        R1="{WORKING_FOLDER}/standard_results/Fasta/{smp}_1.collapser.fasta",
        R2="{WORKING_FOLDER}/standard_results/Fasta/{smp}_2.collapser.fasta",
    shell: """
           fastx_collapser -Q 33 -v -i {input.R1} -o {output.R1}
           fastx_collapser -Q 33 -v -i {input.R2} -o {output.R2}
           """




rule bowtie2_build:
    input:
        GENOME_FA_FILE
    output:
        fa="{TOPHAT_LNCRNA_INDEX_FILE}.fa",
        index_1="{TOPHAT_LNCRNA_INDEX_FILE}.1.bt2",
        index_2="{TOPHAT_LNCRNA_INDEX_FILE}.2.bt2",
        index_3="{TOPHAT_LNCRNA_INDEX_FILE}.3.bt2",
        index_4="{TOPHAT_LNCRNA_INDEX_FILE}.4.bt2",
        index_5="{TOPHAT_LNCRNA_INDEX_FILE}.rev.1.bt2",
        index_6="{TOPHAT_LNCRNA_INDEX_FILE}.rev.2.bt2"
    threads: THREADS
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Index
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM
           cp {input} {output.fa}
           bowtie2-build --threads {threads} {output.fa} {TOPHAT_LNCRNA_INDEX_FILE}
           """



rule tophat2:
    input:
        R1="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_1.fastq",
        R2="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_2.fastq",
        index_1=expand("{index_file}.1.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_2=expand("{index_file}.2.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_3=expand("{index_file}.3.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_4=expand("{index_file}.4.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_5=expand("{index_file}.rev.1.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE),
        index_6=expand("{index_file}.rev.2.bt2", index_file = TOPHAT_LNCRNA_INDEX_FILE)
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/accepted_hits.bam",
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/align_summary.txt"
    threads: THREADS
    shell: """
           tophat2 -p {threads} --mate-inner-dist {TOPHAT_MATE_INNER_DIST} --mate-std-dev {TOPHAT_MATE_STD_DEV} --library-type {TOPHAT_LIBRARY_TYPE} -G {GTF} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{wildcards.smp}_thout {TOPHAT_LNCRNA_INDEX_FILE} {input.R1} {input.R2}
           """



rule copy_summary:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/align_summary.txt"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_align_summary.txt"
    shell: """
           cp {input} {output}
           """



rule sort_bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}_thout/accepted_hits.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.bam"
    shell: """
           samtools sort -o {output} {input}
           """



rule rmdup_bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.rmdup.bam"
    shell: """
           samtools rmdup {input} {output}
           """



rule bam2sam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.sam"
    shell: """
           samtools view -h {input} > {output}
           """



rule select_unique_mapping:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.sam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.sam"
    shell: """
           perl {EXTRACT_UNIQUE} --input_sam {input} --output {output} --aligner T
           """



rule sam2bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.sam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam"
    shell: """
           samtools view -S -b -o {output} {input}
           """



rule index_bam:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam.bai"
    shell: """
           samtools index {input}
           """



rule cufflinks:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Processed_BAM/{smp}.sorted.unique.bam"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{smp}_clout/transcripts.gtf"
    threads: THREADS
    shell: """
           cufflinks -p {threads} --library-type {CUFFLINKS_LIBRARY_TYPE} -g {GTF} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{wildcards.smp}_clout {input}
           """



rule cuffmerge:
    input:
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/{sample}_clout/transcripts.gtf", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
    output:
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt", work_folder = WORKING_FOLDER),
        expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf", work_folder = WORKING_FOLDER)
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_cuffmerge_assembly_list.pl -d {WORKING_FOLDER} -s "{SAMPLE_join}" -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt
           cuffmerge -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly -g {GTF} -s {GENOME_FA_FILE} -p {threads} {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/assembly_list.txt
           """



rule cuffcompare:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.gtf"
    threads: THREADS
    shell: """
           cuffcompare -r {GTF} -s {GENOME_FA_FILE} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/merged.gtf
           """



rule select_cuffcompare_class_code:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf"
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/select_cuffcompare_class_code.pl -i {input} -o {output}
           """



rule iSeeRNA:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.result"
    threads: THREADS
    shell: """
           iSeeRNA -c {HPPRNA_SOFTWARE_FOLDER}/iSeeRNA-1.2.2/conf/{ASSEMBLY_VERSION}.conf -i {input} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA
           cd {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA
           make
           """



rule identify_noncoding:
    input:
        result="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.result",
        gtf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/Assembly/cuffcmp.combined.selected.gtf"
    output:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.noncoding.gtf"
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/identify_noncoding.pl -i {input.result} -j {input.gtf} -o {output}
           """



rule compile_gtf:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/cuffcmp.combined.selected.noncoding.gtf"
    output:
        denovo_map="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_detection/iseeRNA/denovo_lncRNA.transcript_to_gene.txt",
        all_map="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt",
        all_gtf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.gtf"
    threads: THREADS
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/get_transcript_to_gene_table.pl -i {input} -o {output.denovo_map}
           cat {output.denovo_map} {MAP_FILE} > {output.all_map}
           cat {input} {GTF} > {output.all_gtf}
           """



rule kallisto_index:
    input:
         fa=expand("{software}/hppRNA_genome/{assembly}/genome.fa", software = HPPRNA_SOFTWARE_FOLDER, assembly = ASSEMBLY_VERSION),
         gtf=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.gtf", work_folder = WORKING_FOLDER)
    output:
         fa="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/{ASSEMBLY_VERSION}.transcript.fa",
         idx="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/{ASSEMBLY_VERSION}.transcript.idx"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/NGS_plot
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Bigwig
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Index
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary
           gffread -w {output.fa} -g {input.fa} {input.gtf}
           kallisto index -i {output.idx} {output.fa}
           """



rule quant:
    input:
          R1="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_1.fastq",
          R2="{WORKING_FOLDER}/standard_results/Processed_FASTQ/{smp}_2.fastq",
          idx=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/{assembly}.transcript.idx", work_folder = WORKING_FOLDER, assembly = ASSEMBLY_VERSION)
    output:
          sam="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{smp}.sam",
          h5="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{smp}/kallisto/abundance.h5",
          tsv_1="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{smp}/kallisto/abundance.tsv",
          json="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{smp}/kallisto/run_info.json",
          tsv_2="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary/{smp}.abundance.tsv"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{wildcards.smp}
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{wildcards.smp}/kallisto
           kallisto quant --pseudobam -i {input.idx} -o {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{wildcards.smp}/kallisto -b 100 {input.R1} {input.R2} > {output.sam}
           cp {output.tsv_1} {output.tsv_2}
           """



rule sam2bam_2:
    input:
          "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{smp}.sam"
    output:
          "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Processed_BAM/{smp}.bam"
    shell: """
           samtools view -S -b -o {output} {input}
           """



rule matrix:
    input:
          tsv=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary/{sample}.abundance.tsv", work_folder = WORKING_FOLDER, sample = SAMPLES_2),
          txt=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER)
    output:
          transcript="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{PROJECT_NAME}.lncRNA_denovo.transcript.TPM.txt",
          gene="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/combine_kallisto_results.pl -i {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Summary -j {input.txt} -o {output.transcript}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/sleuth_transcript2gene.pl -i {input.txt} -j {output.transcript} -o {output.gene}
           """



rule deg_testis_vs_brain:
    input:
         map=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Index/all_lncRNA_mRNA.transcript_to_gene.txt", work_folder = WORKING_FOLDER),
         h5=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.h5", work_folder = WORKING_FOLDER, sample = CLASS_testis_vs_brain),
         tsv=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/abundance.tsv", work_folder = WORKING_FOLDER, sample = CLASS_testis_vs_brain),
         json=expand("{work_folder}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/{sample}/kallisto/run_info.json", work_folder = WORKING_FOLDER, sample = CLASS_testis_vs_brain)
    output:
         R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.testis_vs_brain.sleuth.R",
         transcript="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.testis_vs_brain.transcript.DEG.txt",
         gene="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/{PROJECT_NAME}.lncRNA_denovo.testis_vs_brain.gene.DEG.txt"
    shell: """
           mkdir -p {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_testis_7a {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_testis_7b {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_testis_7c {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_brain_3b {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_brain_3c {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain/
           cp -r {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/Quantification/R_brain_a {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG/testis_vs_brain/
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_comparison_info_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/DEG -s "{SAMPLE_join_testis_vs_brain}" -g "{SAMPLE_group_join_testis_vs_brain}" -c "testis:brain;"
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_sleuth_Rscript_lncRNA.pl -p {PROJECT_NAME} -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification -c "testis:brain;" -o {output.R}
           R --slave --vanilla < {output.R}
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/sleuth_DEG_gene.pl -i {input.map} -j {output.transcript} -o {output.gene}
           """



rule clean_tpm:
    input:
         "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Gene_expression_matrix/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.txt"
    output:
         "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/clean_FPKM_STAR_RSEM_EBSeq.pl -i {input} -o {output}
           """



rule heatmap:
    input:
        "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt"
    output:
        R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.heatmap.R",
        pdf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.heatmap.pdf"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_heatmap_Rscript.pl -i {PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster -o {output.R}
           R --slave --vanilla < {output.R}
           """



rule pca:
    input:
         "{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt"
    output:
         R="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.PCA.R",
         matrix="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.matrix.txt",
         pdf="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.PCA.pdf",
         rotation="{WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster/{PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt.1.rotation.txt"
    shell: """
           perl {HPPRNA_SOFTWARE_FOLDER}/my_perl/generate_PCA_Rscript.pl -i {PROJECT_NAME}.lncRNA_denovo.gene.TPM.clean.txt -d {WORKING_FOLDER}/standard_results/lncRNA_denovo/lncRNA_quantification/Cluster -o {output.R}
           R --slave --vanilla < {output.R}
           """



